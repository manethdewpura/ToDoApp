version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: todoapp-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: todos
    volumes:
      # Mount init script to create tables
      - ./ToDoApp-BE/src/init.sql:/docker-entrypoint-initdb.d/init.sql
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - todoapp-network

  # Backend API (Express + TypeScript)
  backend:
    build:
      context: ./ToDoApp-BE
      dockerfile: Dockerfile
    container_name: todoapp-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_USER: postgres
      DB_PASS: postgres
      DB_HOST: db
      DB_NAME: todos
      DB_PORT: 5432
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - todoapp-network

  # Frontend (React + Vite + Nginx)
  frontend:
    build:
      context: ./ToDoApp-FE
      dockerfile: Dockerfile
    container_name: todoapp-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - todoapp-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Network for service communication
networks:
  todoapp-network:
    driver: bridge
